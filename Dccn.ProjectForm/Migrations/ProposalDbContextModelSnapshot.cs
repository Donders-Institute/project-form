// <auto-generated />
using System;
using Dccn.ProjectForm.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dccn.ProjectForm.Migrations
{
    [DbContext(typeof(ProposalDbContext))]
    partial class ProposalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dccn.ProjectForm.Data.Approval", b =>
                {
                    b.Property<int>("ProposalId");

                    b.Property<string>("AuthorityRole");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("NotSubmitted");

                    b.Property<string>("ValidatedBy");

                    b.HasKey("ProposalId", "AuthorityRole");

                    b.HasIndex("AuthorityRole");

                    b.ToTable("Approvals");
                });

            modelBuilder.Entity("Dccn.ProjectForm.Data.Comment", b =>
                {
                    b.Property<int>("ProposalId");

                    b.Property<string>("SectionId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.HasKey("ProposalId", "SectionId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Dccn.ProjectForm.Data.Experimenter", b =>
                {
                    b.Property<int>("ProposalId");

                    b.Property<string>("UserId")
                        .HasMaxLength(10);

                    b.HasKey("ProposalId", "UserId");

                    b.ToTable("Experimenters");
                });

            modelBuilder.Entity("Dccn.ProjectForm.Data.Lab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ExtraSubjectCount");

                    b.Property<string>("Modality");

                    b.Property<int>("ProposalId");

                    b.Property<int?>("SessionCount");

                    b.Property<TimeSpan?>("SessionDuration");

                    b.Property<int?>("SubjectCount");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("Dccn.ProjectForm.Data.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("CustomQuota");

                    b.Property<int?>("CustomQuotaAmount");

                    b.Property<string>("CustomQuotaMotivation");

                    b.Property<bool>("EcApproved");

                    b.Property<string>("EcCode");

                    b.Property<string>("EcReference");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATE");

                    b.Property<bool>("ExternalPreservation");

                    b.Property<string>("ExternalPreservationLocation");

                    b.Property<string>("ExternalPreservationReference");

                    b.Property<string>("ExternalPreservationSupervisor");

                    b.Property<string>("FinancialCode");

                    b.Property<string>("FundingContactEmail");

                    b.Property<string>("FundingContactName");

                    b.Property<string>("LastEditedBy")
                        .IsRequired();

                    b.Property<DateTime>("LastEditedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<decimal?>("PaymentAverageSubjectCost")
                        .HasColumnType("DECIMAL(5, 2)");

                    b.Property<decimal?>("PaymentMaxTotalCost")
                        .HasColumnType("DECIMAL(6, 2)");

                    b.Property<int?>("PaymentSubjectCount");

                    b.Property<string>("PrivacyDataAccessors")
                        .IsRequired();

                    b.Property<string>("PrivacyDataDisposalTerm");

                    b.Property<string>("PrivacyDataTypes")
                        .IsRequired();

                    b.Property<string>("PrivacyMotivations")
                        .IsRequired();

                    b.Property<string>("PrivacySecurityMeasures");

                    b.Property<string>("PrivacyStorageLocations")
                        .IsRequired();

                    b.Property<string>("ProjectId")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("DATE");

                    b.Property<string>("SupervisorId")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<byte[]>("Timestamp")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("ROWVERSION");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasFilter("[ProjectId] IS NOT NULL");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Dccn.ProjectForm.Data.StorageAccessRule", b =>
                {
                    b.Property<int>("ProposalId");

                    b.Property<string>("UserId")
                        .HasMaxLength(10);

                    b.Property<string>("Role")
                        .IsRequired();

                    b.HasKey("ProposalId", "UserId");

                    b.ToTable("StorageAccessRules");
                });

            modelBuilder.Entity("Dccn.ProjectForm.Data.Approval", b =>
                {
                    b.HasOne("Dccn.ProjectForm.Data.Proposal", "Proposal")
                        .WithMany("Approvals")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dccn.ProjectForm.Data.Comment", b =>
                {
                    b.HasOne("Dccn.ProjectForm.Data.Proposal")
                        .WithMany("Comments")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dccn.ProjectForm.Data.Experimenter", b =>
                {
                    b.HasOne("Dccn.ProjectForm.Data.Proposal")
                        .WithMany("Experimenters")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dccn.ProjectForm.Data.Lab", b =>
                {
                    b.HasOne("Dccn.ProjectForm.Data.Proposal")
                        .WithMany("Labs")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dccn.ProjectForm.Data.StorageAccessRule", b =>
                {
                    b.HasOne("Dccn.ProjectForm.Data.Proposal")
                        .WithMany("StorageAccessRules")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
